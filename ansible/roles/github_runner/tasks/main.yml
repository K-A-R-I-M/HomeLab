###### Packages Needed
##  git
##  podman

- name: Check if user exists
  getent:
    database: passwd
    key: "{{ github_runner.user }}"

- name: Create a projects directory if it does not exist
  file:
    path: "{{ github_runner.projects_folder }}"
    state: directory
    mode: '0755'
    owner: "{{ github_runner.user }}"
    group: "{{ github_runner.user }}"

- name: Create each project directory if it does not exist
  file:
    path: "{{ github_runner.projects_folder }}/{{ item.name }}"
    state: directory
    mode: '0755'
    owner: "{{ github_runner.user }}"
    group: "{{ github_runner.user }}"
  loop: "{{ github_runner.projects }}"

############################
# DOWNLOAD RUNNER RUNTIME TOOL
############################

- name: Get the latest GitHub Actions runner version
  uri:
    url: "{{ github_runner.github_runner_url }}"
    method: GET
    return_content: yes
  register: github_runner_release
  retries: 3
  delay: 10
  until: github_runner_release.status == 200

- name: Download the latest GitHub runner tarball
  get_url:
    url: "https://github.com/actions/runner/releases/download/{{ github_runner_release.json.name }}/actions-runner-linux-x64-{{ github_runner_release.json.name | replace('v','') }}.tar.gz"
    dest: "{{ github_runner.projects_folder }}/actions-runner.tar.gz"
    mode: '0644'
  register: download_runner

############################
## For each project runner
############################

- name: Set up GitHub Actions runner for each configured runner
  include_tasks:
    file: runners-config.yml
  loop: "{{ github_runner.projects }}"
  when: item.token is defined

###### Podman

- name: Setup Podman config
  shell:
    cmd: sudo loginctl enable-linger {{ github_runner.user }}

- name: Add Podman config file
  copy:
    src: ./containers.conf
    dest: /etc/containers/containers.conf

- name: Load new Podman config
  shell:
    cmd: podman system migrate